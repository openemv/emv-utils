##############################################################################
# Copyright 2022-2025 Leon Lynch
#
# This file is licensed under the terms of the LGPL v2.1 license.
# See LICENSE file.
##############################################################################

cmake_minimum_required(VERSION 3.16)

# Build command line tools by default
option(BUILD_EMV_DECODE "Build emv-decode" ON)
option(BUILD_EMV_TOOL "Build emv-tool" ON)

# Check for argp or allow the FETCH_ARGP option to download and build a local
# copy of libargp for monolithic builds on platforms without package managers
# like MacOS and Windows.
option(FETCH_ARGP "Download and build libargp")
if(FETCH_ARGP)
	set(ARGP_OSX_ARCHITECTURES ${CMAKE_OSX_ARCHITECTURES})
	include(FetchLibArgp)
else()
	find_package(argp)
endif()
if(NOT argp_FOUND)
	if(BUILD_EMV_DECODE OR BUILD_EMV_TOOL)
		message(FATAL_ERROR "Could NOT find argp. Enable FETCH_ARGP to download and build libargp. This is required to build command line tools.")
	endif()
endif()

# Check for PC/SC API using PCSCLite on Linux and MacOS or Win32 API on Windows
if(WIN32)
	include(CheckIncludeFile)
	check_include_file(winscard.h HAVE_WINSCARD_H)
	if(NOT HAVE_WINSCARD_H AND BUILD_EMV_TOOL)
		message(FATAL_ERROR "Could NOT find winscard.h. This is required to build emv-tool.")
	endif()
	set(PCSC_LIBRARIES WinSCard)
else()
	find_package(PCSCLite 1.8)
	if(NOT PCSCLite_FOUND)
		if(BUILD_EMV_TOOL)
			message(FATAL_ERROR "Could NOT find PCSCLite. This is required to build emv-tool.")
		endif()
	endif()
	set(PCSC_LIBRARIES PCSCLite::PCSCLite)
endif()

# Check for headers that provide ntohl/htonl and friends
include(CheckIncludeFile)
CHECK_INCLUDE_FILE(
	arpa/inet.h
	HAVE_ARPA_INET_H
)
CHECK_INCLUDE_FILE(
	winsock.h
	HAVE_WINSOCK_H
)
if(NOT HAVE_ARPA_INET_H AND NOT HAVE_WINSOCK_H)
	if(BUILD_EMV_TOOL)
		message(FATAL_ERROR "Failed to find either arpa/inet.h or winsock.h. This is required to build emv-tool.")
	endif()
endif()

# Print helpers object library
add_library(print_helpers OBJECT EXCLUDE_FROM_ALL print_helpers.c)
target_include_directories(print_helpers INTERFACE
	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
)
target_link_libraries(print_helpers PRIVATE iso7816 emv emv_strings)

# EMV decode command line tool
if(BUILD_EMV_DECODE)
	add_executable(emv-decode emv-decode.c)
	target_link_libraries(emv-decode PRIVATE print_helpers iso7816 emv emv_strings iso8859)
	if(TARGET libargp::argp)
		target_link_libraries(emv-decode PRIVATE libargp::argp)
	endif()

	install(
		TARGETS
			emv-decode
		EXPORT emvUtilsTargets # For use by install(EXPORT) command
		RUNTIME
			COMPONENT emv_runtime
	)
endif()

# EMV processing command line tool
if(BUILD_EMV_TOOL)
	if(PCSCLite_FOUND)
		set_property(
			SOURCE ../src/pcsc.c
			APPEND PROPERTY COMPILE_DEFINITIONS USE_PCSCLITE
		)
	endif()
	if(HAVE_ARPA_INET_H)
		set_property(
			SOURCE ../src/pcsc.c
			APPEND PROPERTY COMPILE_DEFINITIONS HAVE_ARPA_INET_H
		)
	endif()
	if(HAVE_WINSOCK_H)
		set_property(
			SOURCE ../src/pcsc.c
			APPEND PROPERTY COMPILE_DEFINITIONS HAVE_WINSOCK_H
		)
	endif()

	add_executable(emv-tool emv-tool.c ../src/pcsc.c)
	target_link_libraries(emv-tool PRIVATE print_helpers emv emv_strings)
	if(TARGET libargp::argp)
		target_link_libraries(emv-tool PRIVATE libargp::argp)
	endif()
	if(PCSC_LIBRARIES)
		target_link_libraries(emv-tool PRIVATE ${PCSC_LIBRARIES})
	endif()
	if(HAVE_WINSOCK_H AND NOT HAVE_ARPA_INET_H)
		target_link_libraries(emv-tool PRIVATE ws2_32)
	endif()

	install(
		TARGETS
			emv-tool
		EXPORT emvUtilsTargets # For use by install(EXPORT) command
		RUNTIME
			COMPONENT emv_runtime
	)
endif()

if(TARGET emv-decode AND BUILD_TESTING)
	add_test(NAME emv_decode_test1
		COMMAND emv-decode --atr 3BDA18FF81B1FE751F030031F573C78A40009000B0
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_test1_regex
		"^ATR: 3BDA18FF81B1FE751F030031F573C78A40009000B0[\r\n]"
		"  TS  = 0x3B: Direct convention[\r\n]"
		"  T0  = 0xDA: Y1=TA1,TC1,TD1\\\\; K=10[\r\n]"
		"  ----[\r\n]"
		"  TA1 = 0x18: Fi=372\\\\; Di=12\\\\; 31 cycles/ETU @ max 5.0MHz\\\\; max 161290 bit/s[\r\n]"
		"  TB1 absent: Vpp is not connected[\r\n]"
		"  TC1 = 0xFF: N=255\\\\; GT=11[\r\n]"
		"  TD1 = 0x81: Y2=TD2\\\\; Protocol T=1[\r\n]"
		"  ----[\r\n]"
		"  TA2 absent: Negotiable mode[\r\n]"
		"  TB2 absent: Vpp is not connected[\r\n]"
		"  TC2 absent: WI=10\\\\; WT=115200[\r\n]"
		"  TD2 = 0xB1: Y3=TA3,TB3,TD3\\\\; Protocol T=1[\r\n]"
		"  ----[\r\n]"
		"  TA3 = 0xFE: IFSI=254[\r\n]"
		"  TB3 = 0x75: CWT=43\\\\; BWT=1474571[\r\n]"
		"  TD3 = 0x1F: Y4=TA4\\\\; Global \\(T=15\\)[\r\n]"
		"  ----[\r\n]"
		"  TA4 = 0x03: Clock stop: Not supported\\\\; Class: A \\(5V\\), B \\(3V\\)[\r\n]"
		"  ----[\r\n]"
		"  T1  = 0x00: COMPACT-TLV followed by mandatory status indicator[\r\n]"
		".*"
		"  ----[\r\n]"
		"  LCS = 00: No information given[\r\n]"
		"  SW  = 9000: \\(Normal\\)[\r\n]"
		"  ----[\r\n]"
		"  TCK = 0xB0[\r\n]"
	)
	set_tests_properties(emv_decode_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_test1_regex}
	)

	add_test(NAME emv_decode_test2
		COMMAND emv-decode --tlv 810400000320
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	set_tests_properties(emv_decode_test2
		PROPERTIES
			PASS_REGULAR_EXPRESSION "^81 \\| Amount, Authorised \\(Binary\\) : \\[4\\] 00 00 03 20 \\(800\\)[\r\n]"
	)

	add_test(NAME emv_decode_test3
		COMMAND emv-decode --tlv 9A032212159A034912319A03500101
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_test3_regex
		"^9A \\| Transaction Date : \\[3\\] 22 12 15 \\(2022-12-15\\)[\r\n]"
		"9A \\| Transaction Date : \\[3\\] 49 12 31 \\(2049-12-31\\)[\r\n]"
		"9A \\| Transaction Date : \\[3\\] 50 01 01 \\(1950-01-01\\)[\r\n]"
	)
	set_tests_properties(emv_decode_test3
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_test3_regex}
	)

	add_test(NAME emv_decode_test4
		COMMAND emv-decode --tlv 9F2103111542
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	set_tests_properties(emv_decode_test4
		PROPERTIES
			PASS_REGULAR_EXPRESSION "^9F21 \\| Transaction Time : \\[3\\] 11 15 42 \\(11:15:42\\)[\r\n]"
	)

	add_test(NAME emv_decode_test5
		COMMAND emv-decode --tlv 9C0100
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	set_tests_properties(emv_decode_test5
		PROPERTIES
			PASS_REGULAR_EXPRESSION "^9C \\| Transaction Type : \\[1\\] 00 \\(Goods and services\\)[\r\n]"
	)

	add_test(NAME emv_decode_test6
		COMMAND emv-decode --tlv 9F390105
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	set_tests_properties(emv_decode_test6
		PROPERTIES
			PASS_REGULAR_EXPRESSION "^9F39 \\| Point-of-Service \\(POS\\) Entry Mode : \\[1\\] 05 \\(Integrated circuit card \\(ICC\\)\\. CVV can be checked\\.\\)[\r\n]"
	)

	add_test(NAME emv_decode_test7
		COMMAND emv-decode --tlv 571040123456789095D2512201197339300F
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	set_tests_properties(emv_decode_test7
		PROPERTIES
			PASS_REGULAR_EXPRESSION "^57 \\| Track 2 Equivalent Data : \\[16\\] 40 12 34 56 78 90 95 D2 51 22 01 19 73 39 30 0F \\(40123456789095=2512201197339300\\)[\r\n]"
	)

	add_test(NAME emv_decode_test8
		COMMAND emv-decode --tlv 701F9F390105571040123456789095D2512201197339300F820259009F15025999
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_test8_regex
		"^70 \\| EMV Data Template : \\[31\\][\r\n]"
		"  9F39 \\| Point-of-Service \\(POS\\) Entry Mode : \\[1\\] 05 \\(Integrated circuit card \\(ICC\\)\\. CVV can be checked\\.\\)[\r\n]"
		"  57 \\| Track 2 Equivalent Data : \\[16\\] 40 12 34 56 78 90 95 D2 51 22 01 19 73 39 30 0F \\(40123456789095=2512201197339300\\)[\r\n]"
		"  82 \\| Application Interchange Profile \\(AIP\\) : \\[2\\] 59 00[\r\n]"
		"    - Static Data Authentication \\(SDA\\) is supported[\r\n]"
		"    - Cardholder verification is supported[\r\n]"
		"    - Terminal risk management is to be performed[\r\n]"
		"    - Combined DDA/Application Cryptogram Generation \\(CDA\\) is supported[\r\n]"
		"  9F15 \\| Merchant Category Code \\(MCC\\) : \\[2\\] 59 99 \\(Miscellaneous and Specialty Retail Stores\\)[\r\n]"
	)
	set_tests_properties(emv_decode_test8
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_test8_regex}
	)

	add_test(NAME emv_decode_country_test1
		COMMAND emv-decode --country 528
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	set_tests_properties(emv_decode_country_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION "^Netherlands"
	)

	add_test(NAME emv_decode_country_test2
		COMMAND emv-decode --iso3166-1 GBR
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	set_tests_properties(emv_decode_country_test2
		PROPERTIES
			PASS_REGULAR_EXPRESSION "^United Kingdom"
	)

	add_test(NAME emv_decode_country_test3
		COMMAND emv-decode --country US
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	set_tests_properties(emv_decode_country_test3
		PROPERTIES
			PASS_REGULAR_EXPRESSION "^United States"
	)

	add_test(NAME emv_decode_currency_test1
		COMMAND emv-decode --currency 978
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	set_tests_properties(emv_decode_currency_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION "^Euro"
	)

	add_test(NAME emv_decode_currency_test2
		COMMAND emv-decode --iso4217 HKD
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	set_tests_properties(emv_decode_currency_test2
		PROPERTIES
			PASS_REGULAR_EXPRESSION "^Hong Kong Dollar"
	)

	add_test(NAME emv_decode_currency_test3
		COMMAND emv-decode --currency 826
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	set_tests_properties(emv_decode_currency_test3
		PROPERTIES
			PASS_REGULAR_EXPRESSION "^Pound Sterling"
	)

	add_test(NAME emv_decode_language_test1
		COMMAND emv-decode --language fr
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	set_tests_properties(emv_decode_language_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION "^French"
	)

	add_test(NAME emv_decode_language_test2
		COMMAND emv-decode --iso639 zh
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	set_tests_properties(emv_decode_language_test2
		PROPERTIES
			PASS_REGULAR_EXPRESSION "^Chinese"
	)

	add_test(NAME emv_decode_language_test3
		COMMAND emv-decode --language wln
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	set_tests_properties(emv_decode_language_test3
		PROPERTIES
			PASS_REGULAR_EXPRESSION "^Walloon"
	)

	add_test(NAME emv_decode_9F3B_test1
		COMMAND emv-decode --tlv 9F3B06097808260840
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_9F3B_test1_regex
		"^9F3B \\| Application Reference Currency : \\[6\\] 09 78 08 26 08 40[\r\n]"
		"  - Euro[\r\n]"
		"  - Pound Sterling[\r\n]"
		"  - US Dollar[\r\n]"
	)
	set_tests_properties(emv_decode_9F3B_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_9F3B_test1_regex}
	)

	add_test(NAME emv_decode_9F3B_test2
		COMMAND emv-decode --tlv 9F3B06097801230840
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_9F3B_test2_regex
		"^9F3B \\| Application Reference Currency : \\[6\\] 09 78 01 23 08 40[\r\n]"
		"  - Euro[\r\n]"
		"  - Unknown[\r\n]"
		"  - US Dollar[\r\n]"
	)
	set_tests_properties(emv_decode_9F3B_test2
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_9F3B_test2_regex}
	)

	add_test(NAME emv_decode_5F2D_test1
		COMMAND emv-decode --tlv 5F2D04656E6672
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_5F2D_test1_regex
		"^5F2D \\| Language Preference : \\[4\\] 65 6E 66 72[\r\n]"
		"  - English[\r\n]"
		"  - French[\r\n]"
	)
	set_tests_properties(emv_decode_5F2D_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_5F2D_test1_regex}
	)

	add_test(NAME emv_decode_5F2D_test2
		COMMAND emv-decode --tlv 5F2D04454E4652
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_5F2D_test2_regex
		"^5F2D \\| Language Preference : \\[4\\] 45 4E 46 52[\r\n]"
		"  - English[\r\n]"
		"  - French[\r\n]"
	)
	set_tests_properties(emv_decode_5F2D_test2
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_5F2D_test2_regex}
	)

	add_test(NAME emv_decode_5F2D_test3
		COMMAND emv-decode --tlv 5F2D04656EFFFF
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_5F2D_test3_regex
		"^5F2D \\| Language Preference : \\[4\\] 65 6E FF FF[\r\n]"
		"  - English[\r\n]"
		"  - Unknown[\r\n]"
	)
	set_tests_properties(emv_decode_5F2D_test3
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_5F2D_test3_regex}
	)

	add_test(NAME emv_decode_9F0A_test1
		COMMAND emv-decode --tlv 9F0A04000101029F0A030001019F0A050003020400
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_9F0A_test1_regex
		"^9F0A \\| Application Selection Registered Proprietary Data \\(ASRPD\\) : \\[4\\] 00 01 01 02[\r\n]"
		"  - European Cards Stakeholders Group[\r\n]"
		"  - Credit[\r\n]"
		"9F0A \\| Application Selection Registered Proprietary Data \\(ASRPD\\) : \\[3\\] 00 01 01[\r\n]" # No decoding because it is malformed
		"9F0A \\| Application Selection Registered Proprietary Data \\(ASRPD\\) : \\[5\\] 00 03 02 04 00[\r\n]"
		"  - Technical Cooperation ep2 Association[\r\n]"
		"  - Pre-paid[\r\n]$"
	)
	set_tests_properties(emv_decode_9F0A_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_9F0A_test1_regex}
	)

	add_test(NAME emv_decode_9F6E_test1
		COMMAND emv-decode --tlv 9F6E0E0528000332310001010840000000
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_9F6E_test1_regex
		"^9F6E \\| Third Party Data : \\[14\\] 05 28 00 03 32 31 00 01 01 08 40 00 00 00[\r\n]"
		"  - Country: Netherlands[\r\n]"
		"  - Unique Identifier: Mastercard Product Extension[\r\n]"
		"  - Device Type: 21 - Phone \\(Mobile phone\\)[\r\n]"
		"  - Product Identifier: Fleet Card[\r\n]"
		"  - Product Restriction Code: Good for fuel and other products[\r\n]"
		"  - Product Type Code: Prompt for Odometer[\r\n]"
		"  - Card Type: Vehicle card[\r\n]"
	)
	set_tests_properties(emv_decode_9F6E_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_9F6E_test1_regex}
	)

	add_test(NAME emv_decode_9F6E_test2
		COMMAND emv-decode --tlv 9F6E0B0250000330350002000200
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_9F6E_test2_regex
		"^9F6E \\| Third Party Data : \\[11\\] 02 50 00 03 30 35 00 02 00 02 00[\r\n]"
		"  - Country: France[\r\n]"
		"  - Unique Identifier: Mastercard Product Extension[\r\n]"
		"  - Device Type: 05 - Wristband[\r\n]"
		"  - Product Identifier: Transit[\r\n]"
		"  - Concession Code: 02 - Student, potentially eligible for student-based discounts[\r\n]"
	)
	set_tests_properties(emv_decode_9F6E_test2
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_9F6E_test2_regex}
	)

	add_test(NAME emv_decode_9F6E_test3
		COMMAND emv-decode --tlv 9F6E04238C0000
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_9F6E_test3_regex
		"^9F6E \\| Form Factor Indicator \\(FFI\\) : \\[4\\] 23 8C 00 00[\r\n]"
		"  - Consumer Payment Device Form Factor: Consumer mobile phone[\r\n]"
		"  - Consumer Payment Device Features: Passcode Capable[\r\n]"
		"  - Consumer Payment Device Features: Two-way Messaging[\r\n]"
		"  - Consumer Payment Device Features: Cloud Based Payment Credentials[\r\n]"
	)
	set_tests_properties(emv_decode_9F6E_test3
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_9F6E_test3_regex}
	)

	add_test(NAME emv_decode_9F6E_test4
		COMMAND emv-decode --tlv 9F6E049CD04003
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_9F6E_test4_regex
		"^9F6E \\| Enhanced Contactless Reader Capabilities : \\[4\\] 9C D0 40 03[\r\n]"
		"  - Contact mode supported[\r\n]"
		"  - Contactless EMV partial online mode supported[\r\n]"
		"  - Contactless Mobile Supported[\r\n]"
		"  - Try Another Interface after a decline[\r\n]"
		"  - Mobile CVM supported[\r\n]"
		"  - Online PIN supported[\r\n]"
		"  - Plaintext Offline PIN supported[\r\n]"
		"  - CVM Required[\r\n]"
		"  - C-4 kernel version 2.7 or later[\r\n]"
	)
	set_tests_properties(emv_decode_9F6E_test4
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_9F6E_test4_regex}
	)

	add_test(NAME emv_decode_IAD_test1
		COMMAND emv-decode --issuer-app-data 0FA526A83100000000000001500000000F240000000000000000000000000000
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_IAD_test1_regex
		"^Application: CCD-Compliant[\r\n]"
		"IAD Format: CCD Version 4.1[\r\n]"
		"Cryptogram Version: TDES[\r\n]"
		"Derivation Key Index \\(DKI\\): 26[\r\n]"
		"Card Verification Results \\(CVR\\): Second GENERATE AC Not Requested[\r\n]"
		"Card Verification Results \\(CVR\\): First GENERATE AC returned ARQC[\r\n]"
		"Card Verification Results \\(CVR\\): Combined DDA/Application Cryptogram Generation \\(CDA\\) Performed[\r\n]"
		"Card Verification Results \\(CVR\\): PIN Try Counter is 3[\r\n]"
		"Card Verification Results \\(CVR\\): Last Online Transaction Not Completed[\r\n]"
	)
	set_tests_properties(emv_decode_IAD_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_IAD_test1_regex}
	)

	add_test(NAME emv_decode_IAD_test2
		COMMAND emv-decode --issuer-app-data 0110A04003223000000000001126980002FF
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_IAD_test2_regex
		"^Application: M/Chip 4[\r\n]"
		"Derivation Key Index \\(DKI\\): 01[\r\n]"
		"Cryptogram Version Number \\(CVN\\): 10[\r\n]"
		"Cryptogram: Mastercard Proprietary SKD session key[\r\n]"
		"Cryptogram: Counters not included in AC data[\r\n]"
		"Card Verification Results \\(CVR\\): Second GENERATE AC Not Requested[\r\n]"
		"Card Verification Results \\(CVR\\): First GENERATE AC returned ARQC[\r\n]"
		"Card Verification Results \\(CVR\\): Combined DDA/Application Cryptogram Generation \\(CDA\\) Returned in First GENERATE AC[\r\n]"
		"Card Verification Results \\(CVR\\): PIN Try Counter is 3[\r\n]"
		"Card Verification Results \\(CVR\\): Offline PIN Verification Not Performed[\r\n]"
		"Card Verification Results \\(CVR\\): Domestic Transaction[\r\n]"
		"Card Verification Results \\(CVR\\): Lower Cumulative Offline Limit Exceeded[\r\n]"
		"Card Verification Results \\(CVR\\): Upper Cumulative Offline Limit Exceeded[\r\n]"
	)
	set_tests_properties(emv_decode_IAD_test2
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_IAD_test2_regex}
	)

	add_test(NAME emv_decode_IAD_test3
		COMMAND emv-decode --issuer-app-data 0110A04203A20000000000000000000000FF00000000000000FF
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_IAD_test3_regex
		"^Application: M/Chip Advance[\r\n]"
		"Derivation Key Index \\(DKI\\): 01[\r\n]"
		"Cryptogram Version Number \\(CVN\\): 10[\r\n]"
		"Cryptogram: Mastercard Proprietary SKD session key[\r\n]"
		"Cryptogram: Counters not included in AC data[\r\n]"
		"Card Verification Results \\(CVR\\): Second GENERATE AC Not Requested[\r\n]"
		"Card Verification Results \\(CVR\\): First GENERATE AC returned ARQC[\r\n]"
		"Card Verification Results \\(CVR\\): Combined DDA/Application Cryptogram Generation \\(CDA\\) Returned in First GENERATE AC[\r\n]"
		"Card Verification Results \\(CVR\\): Issuer Discretionary[\r\n]"
		"Card Verification Results \\(CVR\\): PIN Try Counter is 3[\r\n]"
		"Card Verification Results \\(CVR\\): Last Online Transaction Not Completed[\r\n]"
		"Card Verification Results \\(CVR\\): Offline PIN Verification Not Performed[\r\n]"
		"Card Verification Results \\(CVR\\): Domestic Transaction[\r\n]"
	)
	set_tests_properties(emv_decode_IAD_test3
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_IAD_test3_regex}
	)

	add_test(NAME emv_decode_IAD_test4
		COMMAND emv-decode --issuer-app-data 06011203A000000F0300001030800000046920AE952C48
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_IAD_test4_regex
		"^Application: Visa Smart Debit/Credit \\(VSDC\\)[\r\n]"
		"IAD Format: 1[\r\n]"
		"Derivation Key Index \\(DKI\\): 01[\r\n]"
		"Cryptogram Version Number \\(CVN\\): 12 \\(CVN18\\)[\r\n]"
		"Card Verification Results \\(CVR\\): Second GENERATE AC Not Requested[\r\n]"
		"Card Verification Results \\(CVR\\): First GENERATE AC returned ARQC[\r\n]"
	)
	set_tests_properties(emv_decode_IAD_test4
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_IAD_test4_regex}
	)

	add_test(NAME emv_decode_IAD_test5
		COMMAND emv-decode --issuer-app-data 1F43FE82A0000000000000000003075300000000000000000000000000000000
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_IAD_test5_regex
		"^Application: Visa Smart Debit/Credit \\(VSDC\\)[\r\n]"
		"IAD Format: 4[\r\n]"
		"Cryptogram Version Number \\(CVN\\): 43 \\(CVN'43'\\)[\r\n]"
		"Derivation Key Index \\(DKI\\): FE[\r\n]"
		"Card Verification Results \\(CVR\\): Verified by the mobile device OS[\r\n]"
		"Card Verification Results \\(CVR\\): Finger biometric[\r\n]"
		"Card Verification Results \\(CVR\\): Second GENERATE AC Not Requested[\r\n]"
		"Card Verification Results \\(CVR\\): GPO returned ARQC[\r\n]"
	)
	set_tests_properties(emv_decode_IAD_test5
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_IAD_test5_regex}
	)

	add_test(NAME emv_decode_9F1D_test1
		COMMAND emv-decode --terminal-risk-management-data 6C7A800000000000
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_9F1D_test1_regex
		"^Enciphered PIN verified online \\(Contactless\\)[\r\n]"
		"Signature \\(paper\\) \\(Contactless\\)[\r\n]"
		"No CVM required \\(Contactless\\)[\r\n]"
		"CDCVM \\(Contactless\\)[\r\n]"
		"Enciphered PIN verified online \\(Contact\\)[\r\n]"
		"Signature \\(paper\\) \\(Contact\\)[\r\n]"
		"Enciphered PIN verification performed by ICC \\(Contact\\)[\r\n]"
		"No CVM required \\(Contact\\)[\r\n]"
		"Plaintext PIN verification performed by ICC \\(Contact\\)[\r\n]"
		"Mag-stripe mode contactless transactions not supported[\r\n]"
	)
	set_tests_properties(emv_decode_9F1D_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_9F1D_test1_regex}
	)

	add_test(NAME emv_decode_9F1D_test2
		COMMAND emv-decode --9F1D 4C7A800000000000
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_9F1D_test2_regex
		"^Enciphered PIN verified online \\(Contactless\\)[\r\n]"
		"No CVM required \\(Contactless\\)[\r\n]"
		"CDCVM \\(Contactless\\)[\r\n]"
		"Enciphered PIN verified online \\(Contact\\)[\r\n]"
		"Signature \\(paper\\) \\(Contact\\)[\r\n]"
		"Enciphered PIN verification performed by ICC \\(Contact\\)[\r\n]"
		"No CVM required \\(Contact\\)[\r\n]"
		"Plaintext PIN verification performed by ICC \\(Contact\\)[\r\n]"
		"Mag-stripe mode contactless transactions not supported[\r\n]"
	)
	set_tests_properties(emv_decode_9F1D_test2
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_9F1D_test2_regex}
	)

	# From actual Visa transaction
	add_test(NAME emv_decode_issuer_response_test1
		COMMAND emv-decode --tlv 89063130363630398A023030910A50FC6205038200003030
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_issuer_response_test1_regex
		"^89 \\| Authorisation Code : \\[6\\] 31 30 36 36 30 39 \"106609\"[\r\n]"
		"8A \\| Authorisation Response Code : \\[2\\] 30 30 \"00 - Approved or completed successfully\"[\r\n]"
		"91 \\| Issuer Authentication Data : \\[10\\] 50 FC 62 05 03 82 00 00 30 30[\r\n]"
		"  - Authorisation Response Cryptogram \\(ARPC\\): 50FC620503820000[\r\n]"
		"  - Authorisation Response Code: 00[\r\n]"
	)
	set_tests_properties(emv_decode_issuer_response_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_issuer_response_test1_regex}
	)

	# From actual Visa transaction
	add_test(NAME emv_decode_issuer_response_test2
		COMMAND emv-decode --tlv 89063632373132337211860F04DA9F6B0A000000050000919863528A0230309108A584F94900820000
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_issuer_response_test2_regex
		"^89 \\| Authorisation Code : \\[6\\] 36 32 37 31 32 33 \"627123\"[\r\n]"
		"72 \\| Issuer Script Template 2 : \\[17\\][\r\n]"
		"  86 \\| Issuer Script Command : \\[15\\] 04 DA 9F 6B 0A 00 00 00 05 00 00 91 98 63 52 \\(PUT DATA for BER-TLV field 9F6B\\)[\r\n]"
		"8A \\| Authorisation Response Code : \\[2\\] 30 30 \"00 - Approved or completed successfully\"[\r\n]"
		"91 \\| Issuer Authentication Data : \\[8\\] A5 84 F9 49 00 82 00 00[\r\n]"
		"  - Authorisation Response Cryptogram \\(ARPC\\): A584F949[\r\n]"
		"  - Card Status Update \\(CSU\\): Issuer Approves Online Transaction[\r\n]"
		"  - Card Status Update \\(CSU\\): Reset Offline Counters to Zero[\r\n]"
	)
	set_tests_properties(emv_decode_issuer_response_test2
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_issuer_response_test2_regex}
	)

	# From actual Mastercard transaction
	add_test(NAME emv_decode_issuer_response_test3
		COMMAND emv-decode --tlv 910AFC436535D614F37300108A0230308906383139353334
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_issuer_response_test3_regex
		"^91 \\| Issuer Authentication Data : \\[10\\] FC 43 65 35 D6 14 F3 73 00 10[\r\n]"
		"  - Authorisation Response Cryptogram \\(ARPC\\): FC436535D614F373[\r\n]"
		"  - M/Chip ARPC Response Code: 0010[\r\n]"
		"8A \\| Authorisation Response Code : \\[2\\] 30 30 \"00 - Approved or completed successfully\"[\r\n]"
		"89 \\| Authorisation Code : \\[6\\] 38 31 39 35 33 34 \"819534\"[\r\n]"
	)
	set_tests_properties(emv_decode_issuer_response_test3
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_issuer_response_test3_regex}
	)

	# From Implementing American Express EMV Acceptance on a Terminal (Oct 2007), page 16, table 5
	# Test with verbosity
	add_test(NAME emv_decode_issuer_response_test4
		COMMAND emv-decode --verbose --tlv 72459F18048000000086158424000210FEBF34F00B7CE770DC61DA847BFB1E59862504DA8E00200000000000000000420141035E031F020000000000000000AC7F4DF1D624A0ED
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_issuer_response_test4_regex
		"^72 \\| Issuer Script Template 2 : \\[69\\][\r\n]"
		"  9F18 \\| Issuer Script Identifier : \\[4\\] 80 00 00 00[\r\n]"
		"  86 \\| Issuer Script Command : \\[21\\] 84 24 00 02 10 FE BF 34 F0 0B 7C E7 70 DC 61 DA 84 7B FB 1E 59 \\(PIN CHANGE/UNBLOCK\\)[\r\n]"
		"  86 \\| Issuer Script Command : \\[37\\] 04 DA 8E 00 20 00 00 00 00 00 00 00 00 42 01 41 03 5E 03 1F 02 00 00 00 00 00 00 00 00 AC 7F 4D F1 D6 24 A0 ED \\(PUT DATA for BER-TLV field 8E00\\)[\r\n]"
	)
	set_tests_properties(emv_decode_issuer_response_test4
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_issuer_response_test4_regex}
	)

	# From Implementing American Express EMV Acceptance on a Terminal (Oct 2007), page 16, table 5
	# Test without verbosity
	add_test(NAME emv_decode_issuer_response_test5
		COMMAND emv-decode --tlv 72459F18048000000086158424000210FEBF34F00B7CE770DC61DA847BFB1E59862504DA8E00200000000000000000420141035E031F020000000000000000AC7F4DF1D624A0ED
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_issuer_response_test5_regex
		"^72 \\| Issuer Script Template 2 : \\[69\\][\r\n]"
		"  9F18 \\| Issuer Script Identifier : \\[4\\] 80 00 00 00[\r\n]"
		"  86 \\| Issuer Script Command : \\[21\\] 84 24 00 02 10 FE BF 34 \.\.\. DC 61 DA 84 7B FB 1E 59 \\(PIN CHANGE/UNBLOCK\\)[\r\n]"
		"  86 \\| Issuer Script Command : \\[37\\] 04 DA 8E 00 20 00 00 00 \.\.\. AC 7F 4D F1 D6 24 A0 ED \\(PUT DATA for BER-TLV field 8E00\\)[\r\n]"
	)
	set_tests_properties(emv_decode_issuer_response_test5
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_issuer_response_test5_regex}
	)

	# From Implementing American Express EMV Acceptance on a Terminal (Oct 2007), page 17, table 6
	add_test(NAME emv_decode_issuer_response_test6
		COMMAND emv-decode --tlv 72179F180400004000860E04DA9F580900C7356286E3779889
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_issuer_response_test6_regex
		"^72 \\| Issuer Script Template 2 : \\[23\\][\r\n]"
		"  9F18 \\| Issuer Script Identifier : \\[4\\] 00 00 40 00[\r\n]"
		"  86 \\| Issuer Script Command : \\[14\\] 04 DA 9F 58 09 00 C7 35 62 86 E3 77 98 89 \\(PUT DATA for BER-TLV field 9F58\\)[\r\n]"
	)
	set_tests_properties(emv_decode_issuer_response_test6
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_issuer_response_test6_regex}
	)

	add_test(NAME emv_decode_9F27_test1
		COMMAND emv-decode --tlv 9F270160
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_9F27_test1_regex
		"^9F27 \\| Cryptogram Information Data : \\[1\\] 60[\r\n]"
		"  - Application Cryptogram \\(AC\\) type: Transaction Certificate \\(TC\\)[\r\n]"
		"  - Payment System-specific cryptogram: 0x20[\r\n]"
	)
	set_tests_properties(emv_decode_9F27_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_9F27_test1_regex}
	)

	add_test(NAME emv_decode_9F27_test2
		COMMAND emv-decode --tlv 9F270101
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_9F27_test2_regex
		"^9F27 \\| Cryptogram Information Data : \\[1\\] 01[\r\n]"
		"  - Application Cryptogram \\(AC\\) type: Application Authentication Cryptogram \\(AAC\\)[\r\n]"
		"  - No advice required[\r\n]"
		"  - Advice: Service not allowed[\r\n]"
	)
	set_tests_properties(emv_decode_9F27_test2
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_9F27_test2_regex}
	)

	add_test(NAME emv_decode_9F27_test3
		COMMAND emv-decode --tlv 9F27018A
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_9F27_test3_regex
		"^9F27 \\| Cryptogram Information Data : \\[1\\] 8A[\r\n]"
		"  - Application Cryptogram \\(AC\\) type: Authorisation Request Cryptogram \\(ARQC\\)[\r\n]"
		"  - Advice required[\r\n]"
		"  - Advice: PIN Try Limit exceeded[\r\n]"
	)
	set_tests_properties(emv_decode_9F27_test3
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_9F27_test3_regex}
	)

	add_test(NAME emv_decode_padding_test1
		COMMAND emv-decode --ber 701870105F2A0208409F1A0208409F15025999123456789ABCDED002DEADFEDC --ignore-padding
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_padding_test1_regex
		"^70 : \\[24\\][\r\n]"
		"  70 : \\[16\\][\r\n]"
		"    5F2A : \\[2\\] 08 40[\r\n]"
		"    9F1A : \\[2\\] 08 40[\r\n]"
		"    9F15 : \\[2\\] 59 99[\r\n]"
		"    Padding : \\[1\\] 12[\r\n]"
		"  Padding : \\[6\\] 34 56 78 9A BC DE[\r\n]"
		"D0 : \\[2\\] DE AD[\r\n]"
		"Padding : \\[2\\] FE DC[\r\n]$"
	)
	set_tests_properties(emv_decode_padding_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_padding_test1_regex}
	)

	add_test(NAME emv_decode_padding_test2
		COMMAND emv-decode --ber 701870105F2A0208409F1A0208409F15025999123456789ABCDED002DEADFEDC
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_padding_test2_regex
		"^70 : \\[24\\][\r\n]"
		"  70 : \\[16\\][\r\n]"
		"    5F2A : \\[2\\] 08 40[\r\n]"
		"    9F1A : \\[2\\] 08 40[\r\n]"
		"    9F15 : \\[2\\] 59 99[\r\n]"
		"BER decoding error -11 at offset 19\\; remaining invalid data: 12 34 56 78 9A BC DE D0 02 DE AD FE DC[\r\n]$"
	)
	set_tests_properties(emv_decode_padding_test2
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_padding_test2_regex}
	)

	add_test(NAME emv_decode_padding_test3
		COMMAND emv-decode --tlv 701870105F2A0208409F1A0208409F15025999123456789ABCDED002DEADFEDC --ignore-padding
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_padding_test3_regex
		"^70 \\| EMV Data Template : \\[24\\][\r\n]"
		"  70 \\| EMV Data Template : \\[16\\][\r\n]"
		"    5F2A \\| Transaction Currency Code : \\[2\\] 08 40 \\(US Dollar\\)[\r\n]"
		"    9F1A \\| Terminal Country Code : \\[2\\] 08 40 \\(United States\\)[\r\n]"
		"    9F15 \\| Merchant Category Code \\(MCC\\) : \\[2\\] 59 99 \\(Miscellaneous and Specialty Retail Stores\\)[\r\n]"
		"    Padding : \\[1\\] 12[\r\n]"
		"  Padding : \\[6\\] 34 56 78 9A BC DE[\r\n]"
		"D0 : \\[2\\] DE AD[\r\n]"
		"Padding : \\[2\\] FE DC[\r\n]$"
	)
	set_tests_properties(emv_decode_padding_test3
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_padding_test3_regex}
	)

	add_test(NAME emv_decode_padding_test4
		COMMAND emv-decode --tlv 701870105F2A0208409F1A0208409F15025999123456789ABCDED002DEADFEDC
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_padding_test4_regex
		"^70 \\| EMV Data Template : \\[24\\][\r\n]"
		"  70 \\| EMV Data Template : \\[16\\][\r\n]"
		"    5F2A \\| Transaction Currency Code : \\[2\\] 08 40 \\(US Dollar\\)[\r\n]"
		"    9F1A \\| Terminal Country Code : \\[2\\] 08 40 \\(United States\\)[\r\n]"
		"    9F15 \\| Merchant Category Code \\(MCC\\) : \\[2\\] 59 99 \\(Miscellaneous and Specialty Retail Stores\\)[\r\n]"
		"BER decoding error -11 at offset 19\\; remaining invalid data: 12 34 56 78 9A BC DE D0 02 DE AD FE DC[\r\n]$"
	)
	set_tests_properties(emv_decode_padding_test4
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_padding_test4_regex}
	)

	# Test decoding of various ASN.1 types
	add_test(NAME emv_decode_asn1_test1
		COMMAND emv-decode --tlv 305D0101000101FF0203FFFFFF02037FFFFF0500060388370306092A864886F70D01010B0900090140090141090142090143090380FC01090580FE5555550908032B312E30652D330A03FFFFFE0A037FFFFE0D04C27B03021A054A6F6E6573
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_asn1_test1_regex
		"^30 \\| ASN.1 Sequence : \\[93\\][\r\n]"
		"  01 \\| ASN.1 Boolean : \\[1\\] 00 \\(False\\)[\r\n]"
		"  01 \\| ASN.1 Boolean : \\[1\\] FF \\(True\\)[\r\n]"
		"  02 \\| ASN.1 Integer : \\[3\\] FF FF FF \\(-1\\)[\r\n]"
		"  02 \\| ASN.1 Integer : \\[3\\] 7F FF FF \\(8388607\\)[\r\n]"
		"  05 \\| ASN.1 Null : \\[0\\][\r\n]"
		"  06 \\| ASN.1 Object Identifier \\(OID\\) : \\[3\\] 88 37 03 \\(2\\.999\\.3\\)[\r\n]" # See ISO 8825-1:2021, 8.19.5
		"  06 \\| ASN.1 Object Identifier \\(OID\\) : \\[9\\] 2A 86 48 86 F7 0D 01 01 0B \\(1\\.2\\.840\\.113549\\.1\\.1\\.11 sha256WithRSAEncryption\\)[\r\n]"
		"  09 \\| ASN.1 Real : \\[0\\] \\(0\\)[\r\n]"
		"  09 \\| ASN.1 Real : \\[1\\] 40 \\(PLUS-INFINITY\\)[\r\n]"
		"  09 \\| ASN.1 Real : \\[1\\] 41 \\(MINUS-INFINITY\\)[\r\n]"
		"  09 \\| ASN.1 Real : \\[1\\] 42 \\(NOT-A-NUMBER\\)[\r\n]"
		"  09 \\| ASN.1 Real : \\[1\\] 43 \\(-0\\)[\r\n]"
		"  09 \\| ASN.1 Real : \\[3\\] 80 FC 01 \\(0x01 x 2\\^-4\\)[\r\n]"
		"  09 \\| ASN.1 Real : \\[5\\] 80 FE 55 55 55 \\(0x555555 x 2\\^-2\\)[\r\n]"
		"  09 \\| ASN.1 Real : \\[8\\] 03 2B 31 2E 30 65 2D 33 \\(\\+1\\.0e-3\\)[\r\n]"
		"  0A \\| ASN.1 Enumerated : \\[3\\] FF FF FE \\(-2\\)[\r\n]"
		"  0A \\| ASN.1 Enumerated : \\[3\\] 7F FF FE \\(8388606\\)[\r\n]"
		"  0D \\| ASN.1 Relative object identifier : \\[4\\] C2 7B 03 02 \\(\\.8571\\.3\\.2\\)[\r\n]" # See ISO 8825-1:2021, 8.20.5
		"  1A \\| ASN.1 Visible \\(ISO 646\\) string : \\[5\\] 4A 6F 6E 65 73 \"Jones\"[\r\n]$" # See ISO 8825-1:2021, 8.23.5.4
	)
	set_tests_properties(emv_decode_asn1_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_asn1_test1_regex}
	)

	# Test decoding of ASN.1 objects as BER
	add_test(NAME emv_decode_asn1_test2
		COMMAND emv-decode --ber 301206035504030C0B6F70656E656D762E6F7267300D06092A864886F70D01010B0500301C060A2B810510864809180101060628CF04000102060628CC45010305
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_asn1_test2_regex
		"^30 : \\[18\\][\r\n]"
		"  06 : \\[3\\] 55 04 03 {2 5 4 3}[\r\n]"
		"  0C : \\[11\\] 6F 70 65 6E 65 6D 76 2E 6F 72 67 \"openemv\\.org\"[\r\n]"
		"30 : \\[13\\][\r\n]"
		"  06 : \\[9\\] 2A 86 48 86 F7 0D 01 01 0B {1 2 840 113549 1 1 11}[\r\n]"
		"  05 : \\[0\\][\r\n]"
		"30 : \\[28\\][\r\n]"
		"  06 : \\[10\\] 2B 81 05 10 86 48 09 18 01 01 {1 3 133 16 840 9 24 1 1}[\r\n]"
		"  06 : \\[6\\] 28 CF 04 00 01 02 {1 0 10116 0 1 2}[\r\n]"
		"  06 : \\[6\\] 28 CC 45 01 03 05 {1 0 9797 1 3 5}[\r\n]$"

	)
	set_tests_properties(emv_decode_asn1_test2
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_asn1_test2_regex}
	)

	# Test fancy decoding of ASN.1 objects
	add_test(NAME emv_decode_asn1_test3
		COMMAND emv-decode --tlv 301206035504030C0B6F70656E656D762E6F7267300D06092A864886F70D01010B0500301C060A2B810510864809180101060628CF04000102060628CC45010305
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_asn1_test3_regex
		"^30 \\| ASN\\.1 Object \\(2\\.5\\.4\\.3 commonName\\) : \\[18\\][\r\n]"
		"  0C \\| ASN\\.1 UTF-8 string : \\[11\\] 6F 70 65 6E 65 6D 76 2E 6F 72 67 \"openemv\\.org\"[\r\n]"
		"30 \\| ASN\\.1 Object \\(1\\.2\\.840\\.113549\\.1\\.1\\.11 sha256WithRSAEncryption\\) : \\[13\\][\r\n]"
		"  05 \\| ASN\\.1 Null : \\[0\\][\r\n]"
		"30 \\| ASN\\.1 Object \\(1\\.3\\.133\\.16\\.840\\.9\\.24\\.1\\.1 dukpt_aes128\\) : \\[28\\][\r\n]"
		"  06 \\| ASN\\.1 Object Identifier \\(OID\\) : \\[6\\] 28 CF 04 00 01 02 \\(1\\.0\\.10116\\.0\\.1\\.2 cbc\\)[\r\n]"
		"  06 \\| ASN\\.1 Object Identifier \\(OID\\) : \\[6\\] 28 CC 45 01 03 05 \\(1\\.0\\.9797\\.1\\.3\\.5 cmac\\)[\r\n]$"
	)
	set_tests_properties(emv_decode_asn1_test3
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_asn1_test3_regex}
	)

	# Test Issuer Public Key Certificate (field 90) with verbosity
	add_test(NAME emv_decode_90_test1
		COMMAND emv-decode --verbose --tlv 9081F8665CD65C20DEAE638C7320EA011E5E2B33FC5070FF7D153D74FE9A01ABFF0B9587B3779C524577F8A57C19923B39CD3F5CCDD457D360DC2619CDBB94328777BB905E1CB79E280458F60C8C5593EFD22D6385512B11B7F2EAFE1184CF9066B9B47A0BF832045066359AE465473D31B9F830A6DE7D88E969CB456033F8073BEC512205920E3DEA773D3E36E1F46C2E8BDDC423FB675CA1710A3D0A06E9C7570919735190BD6ED65BD5EF92C0416BFE4094EA96A218013838EF337151A8BE7222DCF0717399553C4DDA16EBABB2DD386A07BDF313D970C1324CAAB885067691E3EE5E5D8B912799BD53C8E1830237E9EC0A9254D80B2BD3622C
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_90_test1_regex
		"^90 \\| Issuer Public Key Certificater\n]"
		"  - Retrieved using CAPK A000000003 #94[\r\n]"
		"  - Certificate Format: 02[\r\n]"
		"  - Issuer Identifier: 476173FF[\r\n]"
		"  - Certificate Expiration \\(MM/YY\\): 12/31[\r\n]"
		"  - Certificate Serial Number: 03DA0A[\r\n]"
		"  - Hash Algorithm Indicator: 01[\r\n]"
		"  - Public Key Algorithm Indicator: 01[\r\n]"
		"  - Public Key Length: 176 bytes / 1408 bits[\r\n]"
		"  - Public Key Exponent Length: 1 bytes[\r\n]$"
	)
	set_tests_properties(emv_decode_90_test1
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_90_test1_regex}
	)

	# Test Issuer Public Key Certificate (field 90) without verbosity
	add_test(NAME emv_decode_90_test2
		COMMAND emv-decode --tlv 9081F8665CD65C20DEAE638C7320EA011E5E2B33FC5070FF7D153D74FE9A01ABFF0B9587B3779C524577F8A57C19923B39CD3F5CCDD457D360DC2619CDBB94328777BB905E1CB79E280458F60C8C5593EFD22D6385512B11B7F2EAFE1184CF9066B9B47A0BF832045066359AE465473D31B9F830A6DE7D88E969CB456033F8073BEC512205920E3DEA773D3E36E1F46C2E8BDDC423FB675CA1710A3D0A06E9C7570919735190BD6ED65BD5EF92C0416BFE4094EA96A218013838EF337151A8BE7222DCF0717399553C4DDA16EBABB2DD386A07BDF313D970C1324CAAB885067691E3EE5E5D8B912799BD53C8E1830237E9EC0A9254D80B2BD3622C
			--mcc-json ${MCC_JSON_BUILD_PATH}
	)
	string(CONCAT emv_decode_90_test2_regex
		"^90 \\| Issuer Public Key Certificate : \\[248\\] 66 5C D6 5C 20 DE AE 63 \.\.\. 92 54 D8 0B 2B D3 62 2C[\r\n]"
		"  - Retrieved using CAPK A000000003 #94[\r\n]"
		"  - Certificate Format: 02[\r\n]"
		"  - Issuer Identifier: 476173FF[\r\n]"
		"  - Certificate Expiration \\(MM/YY\\): 12/31[\r\n]"
		"  - Certificate Serial Number: 03DA0A[\r\n]"
		"  - Hash Algorithm Indicator: 01[\r\n]"
		"  - Public Key Algorithm Indicator: 01[\r\n]"
		"  - Public Key Length: 176 bytes / 1408 bits[\r\n]"
		"  - Public Key Exponent Length: 1 bytes[\r\n]$"
	)
	set_tests_properties(emv_decode_90_test2
		PROPERTIES
			PASS_REGULAR_EXPRESSION ${emv_decode_90_test2_regex}
	)

	if(WIN32)
		# Ensure that tests can find required DLLs (if any)
		# Assume that the PATH already contains the compiler runtime DLLs
		set(EMVTOOLS_TEST_PATH "${CMAKE_CURRENT_BINARY_DIR}/../src/;$ENV{PATH}")
		cmake_path(NATIVE_PATH EMVTOOLS_TEST_PATH NORMALIZE EMVTOOLS_TEST_PATH)
		get_property(EMVTOOLS_TEST_TARGETS DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY TESTS)
		set_property(TEST ${EMVTOOLS_TEST_TARGETS}
			PROPERTY
				ENVIRONMENT "PATH=${EMVTOOLS_TEST_PATH}"
		)
	endif()
endif()
